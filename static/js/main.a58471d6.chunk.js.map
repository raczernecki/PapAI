{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","configuration","Configuration","organization","apiKey","process","baseOptions","headers","String","openai","OpenAIApi","_useState","useState","_useState2","_slicedToArray","prompt","setPrompt","_useState3","_useState4","result","setResult","_useState5","_useState6","loading","setLoading","handleClick","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","createCompletion","model","temperature","max_tokens","sent","data","choices","text","t0","console","error","stop","apply","arguments","_jsx","className","children","_jsxs","type","value","onChange","e","target","placeholder","onClick","disabled","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"kOA0DeA,MAvDf,WACE,IAAMC,EAAgB,IAAIC,gBAAc,CACtCC,aAAc,GACdC,OAAQC,yIAAYD,gBAEfH,EAAcK,YAAYC,QAAQ,cACzCN,EAAcK,YAAYC,QAAuB,cAAI,UAAYC,OAAOP,EAAcG,QAEtF,IAAMK,EAAS,IAAIC,YAAUT,GAE7BU,EAA4BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,EAA4BL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,EAA8BT,oBAAS,GAAMU,EAAAR,YAAAO,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAEpBG,EAAW,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACD,OAAjBX,GAAW,GAAMS,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEQ1B,EAAO2B,iBAAiB,CAC7CC,MAAO,mBACPtB,OAAQA,EACRuB,YAAa,GACbC,WAAY,MACX,KAAD,EALIR,EAAQE,EAAAO,KAMdpB,EAAUW,EAASU,KAAKC,QAAQ,GAAGC,MAAMV,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,SAEzCY,QAAQC,MAAKb,EAAAW,IAAQ,QAEvBpB,GAAW,GAAO,yBAAAS,EAAAc,OAAA,GAAAjB,EAAA,kBACnB,kBAdgB,OAAAJ,EAAAsB,MAAA,KAAAC,UAAA,KAgBjB,OACEC,cAAA,QAAMC,UAAU,OAAMC,SACpBC,eAAA,OAAKF,UAAU,gBAAeC,SAAA,CAC5BF,cAAA,YACEI,KAAK,OACLC,MAAOxC,EACPyC,SAAU,SAACC,GAAC,OAAKzC,EAAUyC,EAAEC,OAAOH,MAAM,EAC1CI,YAAY,qCACZR,UAAU,aAGZD,cAAA,UACEU,QAASnC,EACToC,SAAUtC,GAA6B,IAAlBR,EAAO+C,OAC5BX,UAAU,MAAKC,SAEd7B,EAAU,sCAAmC,kBAGhD2B,cAAA,OAAKC,UAAU,SAAQC,SAAEjC,QAIjC,EC5CiB4C,EAZO,SAAAC,GAChBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAAxC,GAAkD,IAA/CyC,EAAMzC,EAANyC,OAAQC,EAAM1C,EAAN0C,OAAQC,EAAM3C,EAAN2C,OAAQC,EAAM5C,EAAN4C,OAAQC,EAAO7C,EAAP6C,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJWQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH1B,cAAC2B,IAAMC,WAAU,CAAA1B,SACfF,cAAClD,EAAG,OAOR+D,G","file":"static/js/main.a58471d6.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Configuration, OpenAIApi } from \"openai\";\n\nfunction App() {\n  const configuration = new Configuration({\n    organization: '',\n    apiKey: process.env.apiKey,\n  });\n  delete configuration.baseOptions.headers['User-Agent'];\n  configuration.baseOptions.headers['Authorization'] = 'Bearer ' + String(configuration.apiKey);\n\n  const openai = new OpenAIApi(configuration);\n\n  const [prompt, setPrompt] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const handleClick = async () => {\n    setLoading(true);\n    try {\n      const response = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: prompt,\n        temperature: 0.5,\n        max_tokens: 100,\n      });\n      setResult(response.data.choices[0].text);\n    } catch (error) {\n      console.error(error);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <main className=\"main\">\n      <div className=\"w-2/4 mx-auto\">\n        <textarea\n          type=\"text\"\n          value={prompt}\n          onChange={(e) => setPrompt(e.target.value)}\n          placeholder=\"Serwus, w czym mogę pomóc?\"\n          className=\"textarea\"\n        ></textarea>\n\n        <button\n          onClick={handleClick}\n          disabled={loading || prompt.length === 0}\n          className=\"btn\"\n        >\n          {loading ? \"Zaczekaj około 21 do 37 sekund\" : \"Zapytaj PapAI\"}\n        </button>\n\n        <pre className=\"result\">{result}</pre>\n      </div>\n    </main>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      });\n    }\n  };\n  \n  export default reportWebVitals;\n  ","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}